{"remainingRequest":"E:\\甘润\\技术监督\\supervise\\node_modules\\babel-loader\\lib\\index.js!E:\\甘润\\技术监督\\supervise\\src\\router\\index.js","dependencies":[{"path":"E:\\甘润\\技术监督\\supervise\\src\\router\\index.js","mtime":1623134015377},{"path":"E:\\甘润\\技术监督\\supervise\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623122841293},{"path":"E:\\甘润\\技术监督\\supervise\\node_modules\\babel-loader\\lib\\index.js","mtime":1623122859414}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport routes from \"./routes.js\";\nimport ViewUI from 'view-design';\nimport { getToken } from \"../libs/util.js\";\nVue.use(VueRouter);\nvar router = new VueRouter({\n  mode: 'hash',\n  routes: routes\n});\nvar originalPush = VueRouter.prototype.push;\n\nVueRouter.prototype.push = function push(location, onResolve, onReject) {\n  if (onResolve || onReject) return originalPush.call(this, location, onResolve, onReject);\n  return originalPush.call(this, location).catch(function (err) {\n    return err;\n  });\n}; // router.beforeEach((to, from, next) => {\n// \tViewUI.LoadingBar.start();\n// \tconst token = getToken();\n// \tif (token) {\n// \t\tvar toPath = to.path;\n// \t\tvar boxarr = [];\n// \t\tvar pos = to.path.indexOf('/');\n// \t\twhile (pos > -1) {\n// \t\t\tboxarr.push(pos);\n// \t\t\tpos = to.path.indexOf('/', pos + 1);\n// \t\t}\n// \t\tif (boxarr.length > 2) {\n// \t\t\tlet nextPath = toPath.substring(boxarr[1])\n// \t\t\tnext(nextPath)\n// \t\t} else {\n// \t\t\tnext();\n// \t\t}\n// \t} else {\n// \t\tif (to.path == '/login') {\n// \t\t\tnext();\n// \t\t} else {\n// \t\t\tnext('/login');\n// \t\t}\n// \t}\n// })\n// router.afterEach(route => {\n// \tViewUI.LoadingBar.finish();\n// });\n\n\nexport default router;",{"version":3,"sources":["E:\\甘润\\技术监督\\supervise\\src\\router\\index.js"],"names":["Vue","VueRouter","routes","ViewUI","getToken","use","router","mode","originalPush","prototype","push","location","onResolve","onReject","call","catch","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SACCC,QADD;AAGAJ,GAAG,CAACK,GAAJ,CAAQJ,SAAR;AACA,IAAMK,MAAM,GAAG,IAAIL,SAAJ,CAAc;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,MAAM,EAANA;AAF4B,CAAd,CAAf;AAIA,IAAMM,YAAY,GAAGP,SAAS,CAACQ,SAAV,CAAoBC,IAAzC;;AACAT,SAAS,CAACQ,SAAV,CAAoBC,IAApB,GAA2B,SAASA,IAAT,CAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;AACvE,MAAID,SAAS,IAAIC,QAAjB,EAA2B,OAAOL,YAAY,CAACM,IAAb,CAAkB,IAAlB,EAAwBH,QAAxB,EAAkCC,SAAlC,EAA6CC,QAA7C,CAAP;AAC3B,SAAOL,YAAY,CAACM,IAAb,CAAkB,IAAlB,EAAwBH,QAAxB,EAAkCI,KAAlC,CAAwC,UAAAC,GAAG;AAAA,WAAIA,GAAJ;AAAA,GAA3C,CAAP;AACA,CAHD,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AACA,eAAeV,MAAf","sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport routes from './routes.js'\r\nimport ViewUI from 'view-design'\r\nimport {\r\n\tgetToken\r\n} from '../libs/util.js'\r\nVue.use(VueRouter);\r\nconst router = new VueRouter({\r\n\tmode: 'hash',\r\n\troutes\r\n});\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push(location, onResolve, onReject) {\r\n\tif (onResolve || onReject) return originalPush.call(this, location, onResolve, onReject)\r\n\treturn originalPush.call(this, location).catch(err => err)\r\n}\r\n\r\n// router.beforeEach((to, from, next) => {\r\n// \tViewUI.LoadingBar.start();\r\n// \tconst token = getToken();\r\n// \tif (token) {\r\n// \t\tvar toPath = to.path;\r\n// \t\tvar boxarr = [];\r\n// \t\tvar pos = to.path.indexOf('/');\r\n// \t\twhile (pos > -1) {\r\n// \t\t\tboxarr.push(pos);\r\n// \t\t\tpos = to.path.indexOf('/', pos + 1);\r\n// \t\t}\r\n// \t\tif (boxarr.length > 2) {\r\n// \t\t\tlet nextPath = toPath.substring(boxarr[1])\r\n// \t\t\tnext(nextPath)\r\n// \t\t} else {\r\n// \t\t\tnext();\r\n// \t\t}\r\n// \t} else {\r\n// \t\tif (to.path == '/login') {\r\n// \t\t\tnext();\r\n// \t\t} else {\r\n// \t\t\tnext('/login');\r\n// \t\t}\r\n\r\n// \t}\r\n\r\n// })\r\n// router.afterEach(route => {\r\n// \tViewUI.LoadingBar.finish();\r\n// });\r\nexport default router\n"]}]}